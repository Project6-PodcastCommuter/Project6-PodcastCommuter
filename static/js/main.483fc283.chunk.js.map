{"version":3,"sources":["Map.js","Podcast.js","App.js","serviceWorker.js","index.js"],"names":["Map","chooseBike","time","Number","state","routeResult","setState","commuteTime","props","grabCommuteTime","routeSelected","chooseWalk","console","log","routeType","isLoading","prevProps","prevState","from","this","to","promises","map","type","axios","url","params","key","Promise","all","then","responseArray","transformedResponse","reduce","acc","response","i","userRouteTime","data","route","legs","formattedTime","hour","slice","minutes","mapImage","travelHour","travelMinute","className","undefined","src","alt","onClick","Component","Podcast","podData","podTitle","podDescription","podUrl","podImage","Math","floor","podTime","controls","podAudio","App","callback","appTime","method","headers","dataResponse","q","userInput","language","len_min","len_max","newState","results","podcast","push","title_original","description_original","image","podcast_listennotes_url","audio_length_sec","audio","handleMapChange","e","target","name","value","handlePodcastChange","userEntry","handleSubmit","preventDefault","reset","fromStreet","trim","fromCity","fromProvince","toStreet","toCity","toProvince","action","onSubmit","htmlFor","id","placeholder","onChange","required","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.483fc283.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\n\n// Functionality involving MapQuest API\nclass Map extends Component {\n    constructor() {\n        super()\n        // routeType takes strings of pedestrian or bike \n        // routeResult is an object that holds two objects (bicycle and pedestrian results)\n        this.state = {\n            routeType: '',\n            routeResult: {},\n            commuteTime: 0,\n            isLoading: false,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(prevProps.from != this.props.from){\n\n            if (this.props.from !== '' && this.props.to !== '') {\n                const routeType = ['pedestrian', 'bicycle']\n    \n                //mapping over the routeType and do axios calls \n                const promises = routeType.map((type) => {\n                    return axios({\n                        url: 'https://www.mapquestapi.com/directions/v2/route',\n                        params: {\n                            key: 'GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl',\n                            from: this.props.from,\n                            to: this.props.to,\n                            routeType: type,\n                        }\n                    })\n                })\n    \n                //catch the axios calls and put them in to the response array\n                Promise.all(promises).then((responseArray) => {\n                    //get time from the axios call\n                    //taking the first element in the response array (pedestrain for now) and add the next one to create an object\n                    console.log(responseArray)\n                    const transformedResponse = responseArray.reduce((acc, response, i) => {\n                        const userRouteTime = response.data.route.legs[0].formattedTime;\n                        const hour = userRouteTime.slice(0, 2);\n                        const minutes = userRouteTime.slice(3, 5);\n                        const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl&size=600,250@2x&defaultMarker=marker-sm-81003c-81003c&routeColor=ff7600&type=map&start=${this.props.from}&end=${this.props.to}`\n    \n                        //separating bike and pedestrain so that they are their own object\n                        return {\n                            ...acc,\n                            //once they are in their own object, add key value pairs to each object\n                            [routeType[i]]: {\n                                travelHour: hour,\n                                travelMinute: minutes,\n                                mapImage: mapImage,\n                            }\n                        }\n                        // reduce syntax \n                    }, {})\n    \n                    // assigning objects to route result\n                    this.setState({\n                        routeResult: transformedResponse\n                    })\n                })\n            }\n        }\n    }\n\n    // If user chooses bike\n    chooseBike = () => {\n        // selecting value from routeResult state\n        // \"time\" is holding travel time in minutes\n        const time = Number(this.state.routeResult['bicycle']['travelHour']) * 60 + Number(this.state.routeResult['bicycle']['travelMinute'])\n\n        // Setting commuteTime to \"time\"\n        // Referring to grabCommunteuteTime function in App.js, and assigning it to be a prop\n        // Call grabCommunteuteTime function with value of \"time\"\n        this.setState({\n            commuteTime: time,\n        }, () => {\n            const {\n                grabCommuteTime,\n                routeSelected\n            } = this.props;\n            \n            // console.log(time);\n            grabCommuteTime(time, routeSelected)\n        })\n    }\n\n    chooseWalk =  () => {\n        const time = Number(this.state.routeResult['pedestrian']['travelHour']) * 60 + Number(this.state.routeResult['pedestrian']['travelMinute'])\n        console.log(time)\n\n        this.setState({\n            commuteTime: time,\n        }, () => {\n            const {\n                grabCommuteTime,\n                routeSelected\n            } = this.props;\n\n            grabCommuteTime(time, routeSelected)\n        \n            // setTimeout(() => {\n            //     const {\n            //         routeSelected\n            //     } = this.props;\n            //     routeSelected() \n            // }, 100)\n        })\n    }\n\n    render() {\n\n        \n\n        return (\n            <div className=\"App\">\n\n                {/* when there is nothing in the routeResult, show nothing */}\n                {/* otherwise, show results */}\n                {(this.state.routeResult['bicycle'] === undefined & this.state.routeResult['pedestrian'] === undefined) ? null : (\n\n                    <div className=\"routeResults\">\n                        {/* grab map url from the routeResult and display it */}\n                        <div className=\"mapContainer\">\n                            <img src={this.state.routeResult['pedestrian']['mapImage']} alt=\"Travel route map from start to end\" />\n                        </div>\n\n                        <div className=\"pedestrianResult\">\n                            {/* Do not display hours when time is under 60 minutes */}\n                            {this.state.routeResult['pedestrian']['travelHour'] !== \"00\" ? <p>It's going to take {this.state.routeResult['pedestrian']['travelHour']} hrs {this.state.routeResult['pedestrian']['travelMinute']} minutes to walk.</p> : <p>It's going to take {this.state.routeResult['pedestrian']['travelMinute']} minutes to walk.</p>}\n                            <button type='submit' \n                            onClick={this.chooseWalk}\n        \n                             alt='' >Walk</button>\n                        </div>\n\n\n                        <div className=\"bicycleResult\">\n                            {this.state.routeResult['bicycle']['travelHour'] !== \"00\" ? <p>It's going to take {this.state.routeResult['bicycle']['travelHour']} hrs {this.state.routeResult['bicycle']['travelMinute']} minutes to bike.</p> : <p>It's going to take {this.state.routeResult['bicycle']['travelMinute']} minutes to bike.</p>}\n                            <button type='submit' \n                            onClick={this.chooseBike}\n                             alt='' >Bike</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\n\n\n// Functionality involving Podcast API\nclass Podcast extends Component {\n    constructor() {\n        super();\n\n        // userInput - keyword for podcast\n        // podData - pushing details into array\n        this.state = {\n            podData: [],\n        }\n\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"podcastContent\">        \n                <div>\n                    {/* Dynamically printing podcast information on the page */}\n                    {this.props.podData.map((response) => {\n                        return (\n                            <div>\n                                <h3>{response.podTitle}</h3>\n                                <p>{response.podDescription}</p>\n                                <p>{response.podUrl}</p>\n                                <img src={response.podImage} alt={this.state.podTitle}></img>\n                                <p>{Math.floor(response.podTime / 60)} minutes</p>\n                                <audio\n                                    controls\n                                    src={response.podAudio}>\n                                </audio>\n                            </div>\n                        )\n                    })}\n                </div>\n                \n            </div>\n        )\n    }\n}\n\n\nexport default Podcast;","import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Map from './Map.js'\nimport Podcast from './Podcast';\n\n\n// App holds all components and elements vital to structure of the page\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n// Setting state for user selected commute time from Map.js to pass to Podcast.js\n    this.state = {\n      userInput: '',\n      appTime: 0,\n      fromStreet: '',\n      fromCity:'',\n      fromProvince: '',\n      toStreet: '',\n      toCity: '',\n      toProvince: '',\n      from: '',\n      to: '',\n      userEntry: '',\n      podData: [],\n    }\n  }\n\n  // Function to grab commute time from Map.js\n  // Function is called in Map.js\n  grabCommuteTime = (time, callback) => {\n    console.log(time)\n    this.setState({\n      appTime: time,\n    }, callback)\n  }\n\n    routeSelected = () => {\n    console.log('axios', this.state.appTime)\n    axios({\n      url: `https://listen-api.listennotes.com/api/v2/search`,\n      method: `GET`,\n      headers: { 'X-ListenAPI-Key': 'efedd950b2d84805a5c9ede9b4543e23' },\n      dataResponse: `jsonp`,\n      params: {\n        q: this.state.userInput,\n        type: \"episode\",\n        language: 'English',\n        // Taking commute time from Map.js, passing it to App.js and running it through grabCommuteTime function\n        len_min: this.state.appTime,\n        len_max: this.state.appTime + 5,\n      }\n    }).then((response) => {\n      // creating new array with stuff from listenNotes API call\n      console.log(response)\n\n\n      const newState = [];\n      response.data.results.map(function (podcast) {\n        newState.push({\n          podData: podcast,\n          podTitle: podcast.title_original,\n          podDescription: podcast.description_original,\n          podImage: podcast.image,\n          podUrl: podcast.podcast_listennotes_url,\n          podTime: podcast.audio_length_sec,\n          podAudio: podcast.audio,\n\n        })\n        return podcast;\n      })\n\n      // Use podData to display podcast information on the page\n      this.setState({\n        podData: newState,\n      })\n    });\n  }\n  \n\n  // onChange function\n  handleMapChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handlePodcastChange = (e) => {\n    this.setState({\n      userEntry: e.target.value,\n    }, () => {\n    })\n  }\n\n\n  \n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    e.target.reset();\n    const from = `${this.state.fromStreet.trim()}, ${this.state.fromCity.trim()}, ${this.state.fromProvince}`\n    const to = `${this.state.toStreet.trim()}, ${this.state.toCity.trim()}, ${this.state.toProvince}`\n\n    this.setState({\n      from: from,\n      to: to,\n      userInput: this.state.userEntry,\n    })\n  }\n\n\n  // Importing components and vital information for app to run\n  render(){\n    return(\n      <div>\n        {/* Get user input */}\n        <form action=\"\" onSubmit={this.handleSubmit} className=\"mapForm\">\n          <label htmlFor=\"from\">Start</label>\n          <input type=\"text\" id=\"fromStreet\" name=\"fromStreet\" placeholder=\"enter street name\" value={this.state.fromStreet} onChange={this.handleMapChange} required/>\n          <input type=\"text\" id=\"fromCity\" name=\"fromCity\" placeholder=\"enter city\" value={this.state.fromCity} onChange={this.handleMapChange} required/>\n          <select name=\"fromProvince\" id=\"fromProvince\" onChange={this.handleMapChange} required>\n            <option value=\"\">Choose Province/Territory</option>\n            <option value=\"ON\">ON</option>\n            <option value=\"BC\">BC</option>\n            <option value=\"QC\">QC</option>\n            <option value=\"NS\">NS</option>\n            <option value=\"NB\">NB</option>\n            <option value=\"AB\">AB</option>\n            <option value=\"PE\">PE</option>\n            <option value=\"SK\">SK</option>\n            <option value=\"NL\">NL</option>\n            <option value=\"MB\">MB</option>\n            <option value=\"NT\">NT</option>\n            <option value=\"YT\">YT</option>\n            <option value=\"NU\">NU</option>\n          </select>\n          <label htmlFor=\"end\">End</label>\n          <input type=\"text\" id=\"toStreet\" name=\"toStreet\" placeholder=\"enter street name\" value={this.state.toStreet} onChange={this.handleMapChange} required/>\n          <input type=\"text\" id=\"toCity\" name=\"toCity\" placeholder=\"enter city\" value={this.state.toCity} onChange={this.handleMapChange} required/>\n          <select name=\"toProvince\" id=\"toProvince\" onChange={this.handleMapChange} required>\n            <option value=\"\">Choose Province/Territory</option>\n            <option value=\"ON\">ON</option>\n            <option value=\"BC\">BC</option>\n            <option value=\"QC\">QC</option>\n            <option value=\"NS\">NS</option>\n            <option value=\"NB\">NB</option>\n            <option value=\"AB\">AB</option>\n            <option value=\"PE\">PE</option>\n            <option value=\"SK\">SK</option>\n            <option value=\"NL\">NL</option>\n            <option value=\"MB\">MB</option>\n            <option value=\"NT\">NT</option>\n            <option value=\"YT\">YT</option>\n            <option value=\"NU\">NU</option>\n          </select>\n          <input\n            type=\"text\"\n            className=\"podcastSearch\"\n            placeholder='Search'\n            onChange={this.handlePodcastChange}\n            value={this.state.userEntry}>\n          </input>\n          <button className=\"mapSubmitButton\">Submit</button>\n        </form>\n\n        <Map \n        grabCommuteTime={this.grabCommuteTime} \n        from={this.state.from} \n        to={this.state.to}\n        routeSelected={this.routeSelected}\n        />\n        <Podcast \n        time={this.state.appTime} \n        userInput={this.state.userInput}\n        podData={this.state.podData}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}