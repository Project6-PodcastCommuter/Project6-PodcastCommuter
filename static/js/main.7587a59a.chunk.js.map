{"version":3,"sources":["assets/walk.svg","assets/bike.svg","assets/logo.png","assets/headerDeskop.svg","assets/headerMobile.svg","components/Preloader.js","Map.js","Podcast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","className","Map","chooseBike","time","Number","state","routeResult","setState","commuteTime","isLoading","props","grabCommuteTime","routeSelected","setTimeout","scroller","scrollTo","offset","smooth","duration","chooseWalk","console","log","routeType","prevProps","prevState","from","this","to","flag","promises","map","type","axios","url","params","key","timeout","catch","e","Promise","all","then","responseArray","swal","transformedResponse","reduce","acc","response","i","userRouteTime","data","route","legs","formattedTime","hour","slice","minutes","mapImage","travelHour","travelMinute","alert","grabMapUrl","undefined","id","src","alt","require","onClick","Component","Podcast","selectedPodcast","selectedTitle","target","value","selectedPodcastData","podData","filter","podcast","podUrl","podDescriptionSecond","length","index","podImage","podTitle","Math","floor","podTime","podDescription","href","class","controls","podAudio","App","callback","appTime","method","headers","dataResponse","q","userInput","language","len_min","len_max","count","newState","results","push","podcast_title_original","title_original","image","listennotes_url","audio_length_sec","audio","handleMapChange","name","handlePodcastChange","userEntry","handleSubmit","preventDefault","reset","fromStreet","trim","fromCity","fromProvince","toStreet","toCity","toProvince","scrollToForm","action","onSubmit","placeholder","onChange","required","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,+JCc5BC,EAZG,WACd,OACI,yBAAKC,UAAU,sBACX,sCACA,8BACI,uBAAGA,UAAU,gC,wBCiQdC,E,YA/PX,aAAe,IAAD,8BACV,+CA4FJC,WAAa,WAGT,IAAMC,EAAiE,GAA1DC,OAAO,EAAKC,MAAMC,YAAX,oBAAwDF,OAAO,EAAKC,MAAMC,YAAX,sBAKnF,EAAKC,SAAS,CACVC,YAAaL,EACbM,WAAW,IACZ,WAAO,IAAD,EAID,EAAKC,MAFLC,EAFC,EAEDA,gBACAC,EAHC,EAGDA,cAIJD,EAAgBR,EAAMS,MAG1BC,YAAW,WACPC,WAASC,SAAS,iBAAkB,CAChCC,OAAQ,GACRC,QAAQ,EACRC,SAAU,QAEf,MAxHO,EA2HdC,WAAc,WACV,IAAMhB,EAAoE,GAA7DC,OAAO,EAAKC,MAAMC,YAAX,uBAA2DF,OAAO,EAAKC,MAAMC,YAAX,yBACtFc,QAAQC,IAAIlB,GAEZ,EAAKI,SAAS,CACVC,YAAaL,EACbM,WAAW,IACZ,WAAO,IAAD,EAID,EAAKC,MAFLC,EAFC,EAEDA,gBACAC,EAHC,EAGDA,cAGJD,EAAgBR,EAAMS,MAG1BC,YAAW,WACPC,WAASC,SAAS,iBAAkB,CAChCC,OAAQ,GACRC,QAAQ,EACRC,SAAU,QAEf,MA7IH,EAAKb,MAAQ,CACTiB,UAAW,GACXhB,YAAa,GACbE,YAAa,EACbC,WAAW,GARL,E,gFAYKc,EAAWC,GAAW,IAAD,OACpC,IAAGD,EAAUE,OAASC,KAAKhB,MAAMe,MAAQF,EAAUI,KAAOD,KAAKhB,MAAMiB,KAEzC,KAApBD,KAAKhB,MAAMe,MAAiC,KAAlBC,KAAKhB,MAAMiB,GAAW,CAChD,IAAML,EAAY,CAAC,aAAc,WAG7BM,GAAO,EACLC,EAAWP,EAAUQ,KAAI,SAACC,GAC5B,OAAOC,IAAM,CACTC,IAAK,kDACLC,OAAQ,CACJC,IAAK,mCACLV,KAAM,EAAKf,MAAMe,KACjBE,GAAI,EAAKjB,MAAMiB,GACfL,UAAWS,GAEfK,QAAS,MACVC,OAAM,SAACC,GACNV,GAAK,EACLR,QAAQC,IAAIO,SAIpBW,QAAQC,IAAIX,GAAUY,MAAK,SAACC,GAOxB,GANAtB,QAAQC,IAAIqB,IACC,IAATd,GAGAe,IAAK,QAAS,sCAAuC,UAE/C,IAAPf,EAAa,CAGZ,IAAMgB,EAAsBF,EAAcG,QAAO,SAACC,EAAKC,EAAUC,GAC7D,IAAMC,EAAgBF,EAASG,KAAKC,MAAMC,KAAK,GAAGC,cAC5CC,EAAOL,EAAcM,MAAM,EAAG,GAC9BC,EAAUP,EAAcM,MAAM,EAAG,GACjCE,EAAQ,6LAAyL,EAAK/C,MAAMe,KAApM,gBAAgN,EAAKf,MAAMiB,IAGzO,OAAO,eACAmB,EADP,eAGKxB,EAAU0B,GAAK,CACZU,WAAYJ,EACZK,aAAcH,EACdC,SAAUA,OAInB,IAEHrC,QAAQC,IAAI,uBAAuBuB,GAEnCxB,QAAQC,IAAIjB,OAAOwC,EAAmB,QAAnB,WAA+CA,EAAmB,QAAnB,eAC9DxC,OAAOwC,EAAmB,QAAnB,WAA+CA,EAAmB,QAAnB,cAAkD,IAAMxC,OAAOwC,EAAmB,WAAnB,WAAkDA,EAAmB,WAAnB,YAAmD,GAC1NgB,MAAM,aAGN,EAAKrD,SAAS,CACVD,YAAasC,IACd,YAOCiB,EAHI,EAAKnD,MAFLmD,wB,+BAyE5B,OACI,yBAAK7D,UAAU,YAG6B8D,IAAtCpC,KAAKrB,MAAMC,YAAX,aACwCwD,IAAzCpC,KAAKrB,MAAMC,YAAX,WACD,yBAAKN,UAAU,iBAAiB+D,GAAG,cAC/B,yBAAK/D,UAAU,oBACf,6DACA,6BACI,uBAAGA,UAAU,YAAb,kCAKR,6BAASA,UAAU,uBAAuB+D,GAAG,cAEzC,6DACA,uBAAG/D,UAAU,eAAb,yDAGA,yBAAKA,UAAU,gBACf,yBACIA,UAAU,WACVgE,IAAKtC,KAAKrB,MAAMC,YAAX,oBACL2D,IAAI,wCAIR,yBAAKjE,UAAU,kBACf,yBAAKA,UAAU,kCACX,yBACAA,UAAU,qBACVgE,IAAKE,EAAQ,IAAuBD,IAAI,2CAIxC,4BACAlC,KAAK,SACLoC,QAASzC,KAAKP,WACdnB,UAAU,mBAGV,OADC0B,KAAKrB,MAAMC,YAAX,sBAEG,2BACCoB,KAAKrB,MAAMC,YAAX,sBAAoD,IADrD,MAEI,IACHoB,KAAKrB,MAAMC,YAAX,wBAAsD,IAHvD,OAOA,2BACCoB,KAAKrB,MAAMC,YAAX,wBAAsD,IADvD,QAMJ,uBAAGN,UAAU,kBAAb,qNAQJ,yBAAKA,UAAU,+BACX,yBAAKiE,IAAI,8BACTjE,UAAU,qBACVgE,IAAKE,EAAQ,MAGb,4BACAnC,KAAK,SACLoC,QAASzC,KAAKxB,WACdF,UAAU,mBAGV,OADC0B,KAAKrB,MAAMC,YAAX,mBAEG,2BACCoB,KAAKrB,MAAMC,YAAX,mBADD,OACsD,IACrDoB,KAAKrB,MAAMC,YAAX,qBAAmD,IAFpD,OAMA,2BACCoB,KAAKrB,MAAMC,YAAX,qBAAmD,IADpD,QAMJ,uBAAGN,UAAU,kBAAb,oOAQH0B,KAAKrB,MAAMI,UAAY,kBAAC,EAAD,MAAgB,W,GAxP1C2D,aCwHHC,E,YAzHX,aAAe,IAAD,8BACV,+CAWJC,gBAAkB,SAAChC,GACf,IAAMiC,EAAgBjC,EAAEkC,OAAOC,MACzBC,EAAsB,EAAKhE,MAAMiE,QAAQC,QAAO,SAACC,GACnD,OAAOA,EAAQC,SAAWP,KAE9B,EAAKhE,SAAS,CACV+D,gBAAiBI,EAAoB,KAGzC7D,YAAW,WACPC,WAASC,SAAS,eAAgB,CAC9BC,OAAQ,GACRC,QAAQ,EACRC,SAAU,QAEf,KAtBH,EAAKb,MAAQ,CACTiE,gBAAiB,GACjBS,qBAAsB,IAPhB,E,sEA8BJ,IAAD,OAEL,OACI,yBAAK/E,UAAU,kBACgB,IAA9B0B,KAAKhB,MAAMiE,QAAQK,OAEpB,yBAAKhF,UAAU,qBAAqB+D,GAAG,kBACnC,yBAAK/D,UAAU,oBACX,8CACA,6BACI,uBAAGA,UAAU,YAAb,kCAKR,6BAASA,UAAU,UAAU+D,GAAG,kBAC5B,yBAAK/D,UAAU,eACX,8CACA,oFAEJ,yBAAKA,UAAU,kBAEV0B,KAAKhB,MAAMiE,QAAQ7C,KAAI,SAACiB,EAAUkC,GAC/B,OACI,yBAAKjF,UAAU,uBACX,6BACQ,yBAAKA,UAAU,aAAagE,IAAKjB,EAASmC,SAAUjB,IAAK,EAAK5D,MAAM8E,WACxE,6BACI,4BAAKpC,EAASoC,UACd,uBAAGnF,UAAU,eAAeoF,KAAKC,MAAMtC,EAASuC,QAAU,IAA1D,aAEA,2BAAIvC,EAASwC,gBACb,uBAAGC,KAAMzC,EAAS+B,OAAQN,OAAO,SAASxE,UAAU,YAApD,iBAER,6BACI,4BAAQA,UAAU,oCAAoCmE,QAAS,EAAKG,gBAAiBG,MAAO1B,EAAS+B,QAArG,iBASoB,IAAtCpD,KAAKrB,MAAMiE,gBAAgBU,OAE7B,yBAAKhF,UAAU,kCAAkC+D,GAAG,gBAChD,yBAAK/D,UAAU,oBACX,oEACA,6BACI,uBAAGA,UAAU,YAAb,kCAKhB,6BAASA,UAAU,UAAU+D,GAAG,gBAC5B,6BACI,wBAAI/D,UAAU,mBAAd,wCACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,uBAEX,yBAAKA,UAAU,qBACX,yBAAKgE,IAAKtC,KAAKrB,MAAMiE,gBAAgBY,SAAUjB,IAAKvC,KAAKrB,MAAMiE,gBAAgBa,YAEnF,yBAAKnF,UAAU,oBACX,4BAAK0B,KAAKrB,MAAMiE,gBAAgBa,UAChC,2BAAIzD,KAAKrB,MAAMiE,gBAAgBiB,gBAC/B,uBAAGC,KAAM9D,KAAKrB,MAAMiE,gBAAgBQ,OAAQN,OAAO,SAASxE,UAAU,YAAtE,eAGR,yBAAKyF,MAAM,YACX,2BACIzF,UAAU,oBACV0F,UAAQ,EACR1B,IAAKtC,KAAKrB,MAAMiE,gBAAgBqB,cAK5C,uBAAGH,KAAK,UAAUxF,UAAU,iBACxB,uBAAGyF,MAAM,oBACT,2BAAOzF,UAAU,kBAAjB,sB,GAhHFoE,aCgQPwB,E,YAzPb,WAAYlF,GAAO,IAAD,8BAChB,4CAAMA,KAoBRC,gBAAkB,SAACR,EAAM0F,GACvBzE,QAAQC,IAAIlB,GACZ,EAAKI,SAAS,CACZuF,QAAS3F,GACR0F,IAzBa,EA4BlBhC,WAAa,WACXzC,QAAQC,IAAK,WACb,EAAKd,SAAS,CACZE,WAAW,KA/BG,EAmChBG,cAAgB,WAChBQ,QAAQC,IAAI,QAAS,EAAKhB,MAAMyF,SAChC9D,IAAM,CACJC,IAAI,mDACJ8D,OAAO,MACPC,QAAS,CAAE,kBAAmB,oCAC9BC,aAAa,QACb/D,OAAQ,CACNgE,EAAG,EAAK7F,MAAM8F,UACdpE,KAAM,UACNqE,SAAU,UAEVC,QAAS,EAAKhG,MAAMyF,QACpBQ,QAAS,EAAKjG,MAAMyF,QAAU,KAE/BrD,MAAK,SAACM,GAIP,GAHA3B,QAAQC,IAAI0B,GAEZ3B,QAAQC,IAAI,UAAU0B,EAASG,KAAKqD,OACR,IAAxBxD,EAASG,KAAKqD,MAChB3C,MAAM,sDACH,CACH,IAAM4C,EAAW,GACjBzD,EAASG,KAAKuD,QAAQ3E,KAAI,SAAU+C,GAWlC,OAVA2B,EAASE,KAAK,CACZ/B,QAASE,EACTM,SAAUN,EAAQ8B,uBAClBpB,eAAgBV,EAAQ+B,eACxB1B,SAAUL,EAAQgC,MAClB/B,OAAQD,EAAQiC,gBAChBxB,QAAST,EAAQkC,iBACjBpB,SAAUd,EAAQmC,QAGbnC,KAIT,EAAKtE,SAAS,CACZoE,QAAS6B,SA1EC,EAkFlBS,gBAAkB,SAAC3E,GACjB,EAAK/B,SAAL,eACG+B,EAAEkC,OAAO0C,KAAO5E,EAAEkC,OAAOC,SApFZ,EAwFlB0C,oBAAsB,SAAC7E,GACrB,EAAK/B,SAAS,CACZ6G,UAAW9E,EAAEkC,OAAOC,QACnB,gBA3Fa,EAkGlB4C,aAAe,SAAC/E,GACdA,EAAEgF,iBACFhF,EAAEkC,OAAO+C,QACT,IAAM9F,EAAI,UAAM,EAAKpB,MAAMmH,WAAWC,OAA5B,aAAuC,EAAKpH,MAAMqH,SAASD,OAA3D,aAAsE,EAAKpH,MAAMsH,cACrFhG,EAAE,UAAM,EAAKtB,MAAMuH,SAASH,OAA1B,aAAqC,EAAKpH,MAAMwH,OAAOJ,OAAvD,aAAkE,EAAKpH,MAAMyH,YACrF,EAAKvH,SAAS,CACZmH,SAAU,GACVF,WAAY,GACZG,aAAc,GACdE,OAAQ,GACRC,WAAY,GACZF,SAAU,GACVnG,KAAMA,EACNE,GAAIA,EACJwE,UAAW,EAAK9F,MAAM+G,UACtBA,UAAW,KAGbvG,YAAW,WACTC,WAASC,SAAS,aAAc,CAC9BC,OAAQ,GACRC,QAAQ,EACRC,SAAU,QAEX,MA1Ha,EA6HlB6G,aAAe,WACbjH,WAASC,SAAS,WAAY,CAC5BE,QAAQ,EACRC,SAAU,OA9HZ,EAAKb,MAAQ,CACX8F,UAAW,GACXL,QAAS,EACT0B,WAAY,GACZE,SAAS,GACTC,aAAc,GACdC,SAAU,GACVC,OAAQ,GACRC,WAAY,GACZrG,KAAM,GACNE,GAAI,GACJyF,UAAW,GACXzC,QAAS,GACTlE,WAAW,GAfG,E,sEAwIhB,OACE,6BACE,gCACE,yBAAKT,UAAU,UAAU+D,GAAG,UAC1B,yBAAK/D,UAAU,OAAOiE,IAAI,4BAA2BD,IAAKE,EAAQ,MAClE,wBAAIlE,UAAU,WACZ,4BAAI,uBAAGwF,KAAK,aAAR,WACJ,4BAAI,uBAAGA,KAAK,eAAR,YACJ,4BAAI,uBAAGA,KAAK,mBAAR,oBACJ,4BAAI,uBAAGA,KAAK,iBAAR,YAEN,uBAAGC,MAAM,iBAEX,yBAAKzF,UAAU,yBACb,yBAAKA,UAAU,cACb,gDACA,wBAAIA,UAAU,2BAAd,kDACA,4BAAQmE,QAASzC,KAAKqG,cAAtB,UAEF,yBAAK/H,UAAU,eACb,yBAAKiE,IAAI,mDAAmDjE,UAAU,aAAagE,IAAKE,EAAQ,MAChG,yBAAKD,IAAI,sCAAsCjE,UAAU,YAAYgE,IAAKE,EAAQ,SAWxF,6BAASlE,UAAU,qBACjB,yBAAKA,UAAU,WAAW+D,GAAG,YAC3B,yDACA,uTAIF,0BAAMiE,OAAO,GAAGC,SAAUvG,KAAK2F,aAAcrH,UAAU,WACrD,yBAAKA,UAAU,YACb,2BAAOA,UAAU,UAAU+B,KAAK,OAAOgC,GAAG,aAAamD,KAAK,aAAagB,YAAY,mBAAmBzD,MAAO/C,KAAKrB,MAAMmH,WAAYW,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,IAC9K,2BAAOpI,UAAU,OAAO+B,KAAK,OAAOgC,GAAG,WAAWmD,KAAK,WAAWgB,YAAY,gBAAgBzD,MAAO/C,KAAKrB,MAAMqH,SAAUS,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,IAClK,4BAAQpI,UAAU,WAAWkH,KAAK,eAAenD,GAAG,eAAeoE,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,GACzG,4BAAQ3D,MAAM,IAAd,QACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,QAGJ,yBAAKgB,MAAM,YACT,2BAAOzF,UAAU,UAAU+B,KAAK,OAAOgC,GAAG,WAAWmD,KAAK,WAAWgB,YAAY,sBAAsBzD,MAAO/C,KAAKrB,MAAMuH,SAAUO,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,IAC3K,2BAAOpI,UAAU,OAAO+B,KAAK,OAAOgC,GAAG,SAASmD,KAAK,SAASgB,YAAY,mBAAmBzD,MAAO/C,KAAKrB,MAAMwH,OAAQM,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,IAC/J,4BAAQpI,UAAU,WAAWkH,KAAK,aAAanD,GAAG,aAAaoE,SAAUzG,KAAKuF,gBAAiBmB,UAAQ,GACrG,4BAAQ3D,MAAM,IAAd,QACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,QAGJ,yBAAKzE,UAAU,iBACb,2BACE+B,KAAK,OACLmG,YAAY,uBACZC,SAAUzG,KAAKyF,oBACf1C,MAAO/C,KAAKrB,MAAM+G,UAAWgB,UAAQ,KAGzC,6BACE,4BAAQpI,UAAU,mBAAlB,aAKL0B,KAAKrB,MAAMI,UAAY,kBAAC,EAAD,MAAgB,KAExC,kBAAC,EAAD,CACAE,gBAAiBe,KAAKf,gBACtBkD,WAAYnC,KAAKmC,WACjBpC,KAAMC,KAAKrB,MAAMoB,KACjBE,GAAID,KAAKrB,MAAMsB,GACff,cAAec,KAAKd,gBAEpB,kBAAC,EAAD,CACAT,KAAMuB,KAAKrB,MAAMyF,QACjBK,UAAWzE,KAAKrB,MAAM8F,UACtBxB,QAASjD,KAAKrB,MAAMsE,e,GAnPVP,aCAEiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvG,MAAK,SAAAwG,GACJA,EAAaC,gBAEd7G,OAAM,SAAA8G,GACL/H,QAAQ+H,MAAMA,EAAMC,c","file":"static/js/main.7587a59a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/walk.e7acf7aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/bike.b805667a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.71d0d504.png\";","module.exports = __webpack_public_path__ + \"static/media/headerDeskop.4f7ee2b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/headerMobile.f33000dc.svg\";","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloaderContainer\">\r\n            <p>Loading</p>\r\n            <span>\r\n                <i className=\"preloader fas fa-spinner\">\r\n                </i>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;","import React, { Component } from 'react';\r\nimport Preloader from \"./components/Preloader\";\r\nimport './App.scss';\r\nimport axios from 'axios';\r\nimport { scroller } from 'react-scroll';\r\nimport swal from 'sweetalert';\r\n\r\n// Functionality involving MapQuest API\r\nclass Map extends Component {\r\n    constructor() {\r\n        super()\r\n        // routeType takes strings of pedestrian or bike \r\n        // routeResult is an object that holds two objects (bicycle and pedestrian results)\r\n        this.state = {\r\n            routeType: '',\r\n            routeResult: {},\r\n            commuteTime: 0,\r\n            isLoading: false,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.from !== this.props.from || prevProps.to !== this.props.to){\r\n\r\n            if (this.props.from !== '' && this.props.to !== '') {\r\n                const routeType = ['pedestrian', 'bicycle']\r\n    \r\n                //mapping over the routeType and do axios calls \r\n                let flag = false\r\n                const promises = routeType.map((type) => {\r\n                    return axios({\r\n                        url: 'https://www.mapquestapi.com/directions/v2/route',\r\n                        params: {\r\n                            key: 'GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl',\r\n                            from: this.props.from,\r\n                            to: this.props.to,\r\n                            routeType: type,\r\n                        },\r\n                        timeout: 2000,\r\n                    }).catch((e)=>{\r\n                        flag=true\r\n                        console.log(flag)\r\n                    })\r\n                })\r\n                //catch the axios calls and put them in to the response array\r\n                Promise.all(promises).then((responseArray) => {\r\n                    console.log(responseArray)\r\n                    if (flag === true) {\r\n                        // || responseArray[0].data.route.realTime === 0 || responseArray[1].data.route.realTime === 0\r\n                        // console.log(responseArray[0].data.route.legs[0].time);\r\n                        swal(\"Oops!\", \"Invalid location, please try again!\", \"error\");\r\n                    }\r\n                    if(flag===false){\r\n                        //get time from the axios call\r\n                        //taking the first element in the response array (pedestrain for now) and add the next one to create an object\r\n                        const transformedResponse = responseArray.reduce((acc, response, i) => {\r\n                            const userRouteTime = response.data.route.legs[0].formattedTime;\r\n                            const hour = userRouteTime.slice(0, 2);\r\n                            const minutes = userRouteTime.slice(3, 5);\r\n                            const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl&size=600,250@2x&defaultMarker=marker-sm-81003c-81003c&routeColor=ff7600&margin=60&type=map&start=${this.props.from}&end=${this.props.to}`\r\n        \r\n                            //separating bike and pedestrain so that they are their own object\r\n                            return {\r\n                                ...acc,\r\n                                //once they are in their own object, add key value pairs to each object\r\n                                [routeType[i]]: {\r\n                                    travelHour: hour,\r\n                                    travelMinute: minutes,\r\n                                    mapImage: mapImage,\r\n                                }\r\n                            }\r\n                            // reduce syntax \r\n                        }, {})\r\n\r\n                        console.log('transformed response',transformedResponse)\r\n\r\n                        console.log(Number(transformedResponse['bicycle']['travelHour'] + transformedResponse['bicycle']['travelMinute']))\r\n                        if (Number(transformedResponse['bicycle']['travelHour'] + transformedResponse['bicycle']['travelMinute'] == 0) && Number(transformedResponse['pedestrian']['travelHour'] + transformedResponse['pedestrian']['travelHour'] == 0)){\r\n                            alert('time is 0')\r\n                        }else{\r\n                            // assigning objects to route result\r\n                            this.setState({\r\n                                routeResult: transformedResponse,\r\n                            }, () => {\r\n                                const {\r\n                                    grabMapUrl,\r\n\r\n                                } = this.props;\r\n\r\n                                // console.log(time);\r\n                                grabMapUrl()\r\n                            })\r\n                        }\r\n                        \r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // If user chooses bike\r\n    chooseBike = () => {\r\n        // selecting value from routeResult state\r\n        // \"time\" is holding travel time in minutes\r\n        const time = Number(this.state.routeResult['bicycle']['travelHour']) * 60 + Number(this.state.routeResult['bicycle']['travelMinute'])\r\n\r\n        // Setting commuteTime to \"time\"\r\n        // Referring to grabCommunteuteTime function in App.js, and assigning it to be a prop\r\n        // Call grabCommunteuteTime function with value of \"time\"\r\n        this.setState({\r\n            commuteTime: time,\r\n            isLoading: true,\r\n        }, () => {\r\n            const {\r\n                grabCommuteTime,\r\n                routeSelected\r\n            } = this.props;\r\n            \r\n            // console.log(time);\r\n            grabCommuteTime(time, routeSelected)\r\n        })\r\n\r\n        setTimeout(() => {\r\n            scroller.scrollTo('podcastResults', {\r\n                offset: 50,\r\n                smooth: true,\r\n                duration: 500,\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    chooseWalk =  () => {\r\n        const time = Number(this.state.routeResult['pedestrian']['travelHour']) * 60 + Number(this.state.routeResult['pedestrian']['travelMinute'])\r\n        console.log(time)\r\n\r\n        this.setState({\r\n            commuteTime: time,\r\n            isLoading: true,\r\n        }, () => {\r\n            const {\r\n                grabCommuteTime,\r\n                routeSelected\r\n            } = this.props;\r\n\r\n            grabCommuteTime(time, routeSelected)\r\n        })\r\n\r\n        setTimeout(() => {\r\n            scroller.scrollTo('podcastResults', {\r\n                offset: 50,\r\n                smooth: true,\r\n                duration: 500,\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                {/* when there is nothing in the routeResult, show nothing */}\r\n                {/* otherwise, show results */}\r\n                {(this.state.routeResult[\"bicycle\"] === undefined) &\r\n                (this.state.routeResult[\"pedestrian\"] === undefined) ? (\r\n                <div className=\"placeholderMap\" id=\"mapResults\">\r\n                    <div className=\"emptyDiv wrapper\">\r\n                    <h3>Pick a mode of transportation</h3>\r\n                    <div>\r\n                        <p className=\"scrollUp\">Scroll up to make a search!</p>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                <section className=\"routeResults wrapper\" id=\"mapResults\">\r\n                    {/* grab map url from the routeResult and display it */}\r\n                    <h3>Pick a mode of transportation</h3>\r\n                    <p className=\"commuteText\">\r\n                    Based off your commute, pick a mode of transportation\r\n                    </p>\r\n                    <div className=\"mapContainer\">\r\n                    <img\r\n                        className=\"mapImage\"\r\n                        src={this.state.routeResult[\"pedestrian\"][\"mapImage\"]}\r\n                        alt=\"Travel route map from start to end\"\r\n                    />\r\n                    </div>\r\n\r\n                    <div className=\"commuteOptions\">\r\n                    <div className=\"commuteResult pedestrianResult\">\r\n                        <img\r\n                        className=\"mobileRouteTypeImg\"\r\n                        src={require(\"./assets/walk.svg\") } alt=\"Feet walking to show pedestrian option\"\r\n                        ></img>\r\n                        {/* Do not display hours when time is under 60 minutes */}\r\n\r\n                        <button\r\n                        type=\"submit\"\r\n                        onClick={this.chooseWalk}\r\n                        className=\"routeTypeButton\"\r\n                        >\r\n                        {this.state.routeResult[\"pedestrian\"][\"travelHour\"] !==\r\n                        \"00\" ? (\r\n                            <p>\r\n                            {this.state.routeResult[\"pedestrian\"][\"travelHour\"]}{\" \"}\r\n                            hrs{\" \"}\r\n                            {this.state.routeResult[\"pedestrian\"][\"travelMinute\"]}{\" \"}\r\n                            min\r\n                            </p>\r\n                        ) : (\r\n                            <p>\r\n                            {this.state.routeResult[\"pedestrian\"][\"travelMinute\"]}{\" \"}\r\n                            min\r\n                            </p>\r\n                        )}\r\n                        </button>\r\n                        <p className=\"recommendation\">\r\n                        Walking is a great way to improve or maintain your overall\r\n                        health. Just 30 minutes every day can increase\r\n                        cardiovascular fitness, strengthen bones, reduce excess\r\n                        body fat, and boost muscle power and endurance\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"commuteResult bicycleResult\">\r\n                        <img alt=\"Bicycle to show bike option\"\r\n                        className=\"mobileRouteTypeImg\"\r\n                        src={require(\"./assets/bike.svg\")}\r\n                        ></img>\r\n\r\n                        <button\r\n                        type=\"submit\"\r\n                        onClick={this.chooseBike}\r\n                        className=\"routeTypeButton\"\r\n                        >\r\n                        {this.state.routeResult[\"bicycle\"][\"travelHour\"] !==\r\n                        \"00\" ? (\r\n                            <p>\r\n                            {this.state.routeResult[\"bicycle\"][\"travelHour\"]} hrs{\" \"}\r\n                            {this.state.routeResult[\"bicycle\"][\"travelMinute\"]}{\" \"}\r\n                            min\r\n                            </p>\r\n                        ) : (\r\n                            <p>\r\n                            {this.state.routeResult[\"bicycle\"][\"travelMinute\"]}{\" \"}\r\n                            min\r\n                            </p>\r\n                        )}\r\n                        </button>\r\n                        <p className=\"recommendation\">\r\n                        Riding to work or the shops is one of the most\r\n                        time-efficient ways to combine regular exercise with your\r\n                        everyday routine. An estimated one billion people ride\r\n                        bicycles every day – for transport, recreation and sport.\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    {this.state.isLoading ? <Preloader /> : null}\r\n                </section>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport { scroller } from 'react-scroll';\r\n\r\n\r\n// Functionality involving Podcast API\r\nclass Podcast extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        // userInput - keyword for podcast\r\n        // podData - pushing details into array\r\n        this.state = {\r\n            selectedPodcast: [],\r\n            podDescriptionSecond: '',\r\n        }\r\n\r\n    }\r\n\r\n    selectedPodcast = (e) => {\r\n        const selectedTitle = e.target.value\r\n        const selectedPodcastData = this.props.podData.filter((podcast) => {\r\n            return podcast.podUrl === selectedTitle;\r\n        })\r\n        this.setState({\r\n            selectedPodcast: selectedPodcastData[0],\r\n        })\r\n\r\n        setTimeout(() => {\r\n            scroller.scrollTo('finalPodcast', {\r\n                offset: 50,\r\n                smooth: true,\r\n                duration: 500,\r\n            });\r\n        }, 50);\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.podData)\r\n        return (\r\n            <div className=\"podcastContent\">   \r\n            {this.props.podData.length === 0 \r\n            ? \r\n            <div className=\"placeholderPodcast\" id=\"podcastResults\">\r\n                <div className=\"emptyDiv wrapper\">\r\n                    <h3>Pick a Podcast</h3>\r\n                    <div>\r\n                        <p className=\"scrollUp\">Scroll up to make a search!</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            :\r\n                <section className='wrapper' id=\"podcastResults\">\r\n                    <div className='pickPodcast'>\r\n                        <h3>Pick a Podcast</h3>\r\n                        <p>Here are some podcasts that match your commute time.</p>\r\n                    </div>\r\n                    <div className=\"podcastResults\">\r\n                        {/* Dynamically printing podcast information on the page */}\r\n                        {this.props.podData.map((response, index) => {\r\n                            return (\r\n                                <div className='podcastCard podcast'>\r\n                                    <div>\r\n                                            <img className=\"podcastImg\" src={response.podImage} alt={this.state.podTitle}></img>\r\n                                        <div>\r\n                                            <h4>{response.podTitle}</h4>\r\n                                            <p className=\"podcastTime\">{Math.floor(response.podTime / 60)} minutes</p>\r\n                                        </div>\r\n                                            <p>{response.podDescription}</p>\r\n                                            <a href={response.podUrl} target=\"_blank\" className=\"readMore\">More Details</a>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button className=\"choosePodcastButton podcastButton\" onClick={this.selectedPodcast} value={response.podUrl}>Choose</button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </section>\r\n            }     \r\n                \r\n                    { this.state.selectedPodcast.length === 0 \r\n                    ?\r\n                    <div className=\"placeholderPodcast finalPodcast\" id=\"finalPodcast\">\r\n                        <div className=\"emptyDiv wrapper\">\r\n                            <h3>Have a listen and enjoy your commute</h3>\r\n                            <div>\r\n                                <p className=\"scrollUp\">Scroll up to make a search!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : \r\n                <section className='wrapper' id=\"finalPodcast\">\r\n                    <div>\r\n                        <h3 className=\"finalPodcastTag\">Have a listen and enjoy your commute</h3>\r\n                        <div className=\"selectedAudio\">\r\n                            <div className=\"finalPodcastContent\">\r\n                            {/* <div className=\"selectedAudio finalPodcastContent\"> */}\r\n                                <div className=\"finalPodcastImage\">\r\n                                    <img src={this.state.selectedPodcast.podImage} alt={this.state.selectedPodcast.podTitle}></img>\r\n                                </div>\r\n                                <div className=\"finalPodcastInfo\">\r\n                                    <h3>{this.state.selectedPodcast.podTitle}</h3>\r\n                                    <p>{this.state.selectedPodcast.podDescription}</p>\r\n                                    <a href={this.state.selectedPodcast.podUrl} target=\"_blank\" className=\"readMore\">Read More</a>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"audioDiv\">\r\n                            <audio \r\n                                className=\"finalPodcastAudio\"\r\n                                controls\r\n                                src={this.state.selectedPodcast.podAudio}>\r\n                            </audio>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <a href=\"#header\" className=\"refreshButton\">\r\n                        <i class=\"fas fa-arrow-up\"></i>\r\n                        <label className=\"visuallyHidden\">Back to top</label>\r\n                    </a>\r\n                </section>\r\n                } \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Podcast;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport axios from 'axios';\r\nimport Map from './Map.js'\r\nimport Podcast from './Podcast';\r\nimport { scroller } from 'react-scroll';\r\nimport Preloader from './components/Preloader';\r\n\r\n\r\n\r\n// App holds all components and elements vital to structure of the page\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      userInput: '',\r\n      appTime: 0,\r\n      fromStreet: '',\r\n      fromCity:'',\r\n      fromProvince: '',\r\n      toStreet: '',\r\n      toCity: '',\r\n      toProvince: '',\r\n      from: '',\r\n      to: '',\r\n      userEntry: '',\r\n      podData: [],\r\n      isLoading: false,\r\n    }\r\n  }\r\n\r\n  // Function to grab commute time from Map.js\r\n  // Function is called in Map.js\r\n  grabCommuteTime = (time, callback) => {\r\n    console.log(time)\r\n    this.setState({\r\n      appTime: time,\r\n    }, callback)\r\n  }\r\n\r\n  grabMapUrl = () => {\r\n    console.log( 'loading')\r\n    this.setState({\r\n      isLoading: false,\r\n    })\r\n  }\r\n\r\n    routeSelected = () => {\r\n    console.log('axios', this.state.appTime)\r\n    axios({\r\n      url: `https://listen-api.listennotes.com/api/v2/search`,\r\n      method: `GET`,\r\n      headers: { 'X-ListenAPI-Key': 'efedd950b2d84805a5c9ede9b4543e23' },\r\n      dataResponse: `jsonp`,\r\n      params: {\r\n        q: this.state.userInput,\r\n        type: \"episode\",\r\n        language: 'English',\r\n        // Taking commute time from Map.js, passing it to App.js and running it through grabCommuteTime function\r\n        len_min: this.state.appTime,\r\n        len_max: this.state.appTime + 5,\r\n      }\r\n    }).then((response) => {\r\n      console.log(response)\r\n      // creating new array with stuff from listenNotes API call\r\n      console.log('podcast',response.data.count)\r\n      if (response.data.count === 0){\r\n        alert('there is no podcast that meets our requirement')\r\n      }else{\r\n        const newState = [];\r\n        response.data.results.map(function (podcast) {\r\n          newState.push({\r\n            podData: podcast,\r\n            podTitle: podcast.podcast_title_original,\r\n            podDescription: podcast.title_original,\r\n            podImage: podcast.image,\r\n            podUrl: podcast.listennotes_url,\r\n            podTime: podcast.audio_length_sec,\r\n            podAudio: podcast.audio,\r\n\r\n          })\r\n          return podcast;\r\n        })\r\n\r\n        // Use podData to display podcast information on the page\r\n        this.setState({\r\n          podData: newState,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  \r\n\r\n  // onChange function\r\n  handleMapChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  handlePodcastChange = (e) => {\r\n    this.setState({\r\n      userEntry: e.target.value,\r\n    }, () => {\r\n    })\r\n  }\r\n\r\n\r\n  \r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    const from = `${this.state.fromStreet.trim()}, ${this.state.fromCity.trim()}, ${this.state.fromProvince}`\r\n    const to = `${this.state.toStreet.trim()}, ${this.state.toCity.trim()}, ${this.state.toProvince}`\r\n    this.setState({\r\n      fromCity: '',\r\n      fromStreet: '',\r\n      fromProvince: '',\r\n      toCity: '',\r\n      toProvince: '',\r\n      toStreet: '',\r\n      from: from,\r\n      to: to,\r\n      userInput: this.state.userEntry,\r\n      userEntry: '',\r\n    })\r\n\r\n    setTimeout(() => {\r\n      scroller.scrollTo('mapResults', { \r\n        offset: 80,\r\n        smooth: true,\r\n        duration: 500,\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  scrollToForm = () => {\r\n    scroller.scrollTo('formInfo', {\r\n      smooth: true,\r\n      duration: 700,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  // Importing components and vital information for app to run\r\n  render(){\r\n    return(\r\n      <div>\r\n        <header>\r\n          <nav className=\"wrapper\" id=\"header\">\r\n            <img className=\"logo\" alt=\"Logo for Podcast Commuter\"src={require('./assets/logo.png')}></img>\r\n            <ul className=\"mainNav\">\r\n              <li><a href=\"#formInfo\">Search</a></li>\r\n              <li><a href=\"#mapResults\">Results</a></li>\r\n              <li><a href=\"#podcastResults\">Recommendations</a></li>\r\n              <li><a href=\"#finalPodcast\">Listen</a></li>\r\n            </ul>\r\n            <i class=\"fas fa-bars\"></i>\r\n          </nav>\r\n          <div className=\"headerContent wrapper\">\r\n            <div className=\"headerInfo\">\r\n              <h1>Podcast Commuter</h1>\r\n              <h2 className=\"headerDescriptionMobile\">Find podcasts that suit your length of commute</h2>\r\n              <button onClick={this.scrollToForm}>Start</button>\r\n            </div>\r\n            <div className=\"headerImage\">\r\n              <img alt=\"Person walking through park listening to podcast\" className=\"desktopImg\" src={require('./assets/headerDeskop.svg')}></img>\r\n              <img alt=\"Person walking listening to podcast\" className=\"mobileImg\" src={require('./assets/headerMobile.svg')}></img>\r\n            </div>\r\n          </div>\r\n          {/* <a href=\"#header\" className=\"refreshButton\">\r\n              <i class=\"fas fa-arrow-up\"></i>\r\n              <label className=\"visuallyHidden\">Back to top</label>\r\n          </a> */}\r\n        </header>\r\n\r\n\r\n        {/* Get user input */}\r\n        <section className=\"wrapper mobileMap\"> \r\n          <div className=\"formInfo\" id='formInfo'>\r\n            <h3>Let's find some podcasts.</h3>\r\n            <p>Enter your starting and ending location, along with what type of podcast you’re in the mood for. We will calculate\r\n            your commute time, and ask your to select your preferred mode of transportation. Based on the time of your trip,\r\n            we will give you some podcast recommendations.</p>\r\n          </div>\r\n          <form action=\"\" onSubmit={this.handleSubmit} className=\"mapForm\">\r\n            <div className=\"mapInput\">\r\n              <input className=\"address\" type=\"text\" id=\"fromStreet\" name=\"fromStreet\" placeholder=\"Starting address\" value={this.state.fromStreet} onChange={this.handleMapChange} required />\r\n              <input className=\"city\" type=\"text\" id=\"fromCity\" name=\"fromCity\" placeholder=\"Starting city\" value={this.state.fromCity} onChange={this.handleMapChange} required />\r\n              <select className=\"province\" name=\"fromProvince\" id=\"fromProvince\" onChange={this.handleMapChange} required>\r\n                <option value=\"\">Prov</option>\r\n                <option value=\"ON\">ON</option>\r\n                <option value=\"BC\">BC</option>\r\n                <option value=\"QC\">QC</option>\r\n                <option value=\"NS\">NS</option>\r\n                <option value=\"NB\">NB</option>\r\n                <option value=\"AB\">AB</option>\r\n                <option value=\"PE\">PE</option>\r\n                <option value=\"SK\">SK</option>\r\n                <option value=\"NL\">NL</option>\r\n                <option value=\"MB\">MB</option>\r\n                <option value=\"NT\">NT</option>\r\n                <option value=\"YT\">YT</option>\r\n                <option value=\"NU\">NU</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"mapInput\">\r\n              <input className=\"address\" type=\"text\" id=\"toStreet\" name=\"toStreet\" placeholder=\"Destination address\" value={this.state.toStreet} onChange={this.handleMapChange} required/>\r\n              <input className=\"city\" type=\"text\" id=\"toCity\" name=\"toCity\" placeholder=\"Destination city\" value={this.state.toCity} onChange={this.handleMapChange} required/>\r\n              <select className=\"province\" name=\"toProvince\" id=\"toProvince\" onChange={this.handleMapChange} required>\r\n                <option value=\"\">Prov</option>\r\n                <option value=\"ON\">ON</option>\r\n                <option value=\"BC\">BC</option>\r\n                <option value=\"QC\">QC</option>\r\n                <option value=\"NS\">NS</option>\r\n                <option value=\"NB\">NB</option>\r\n                <option value=\"AB\">AB</option>\r\n                <option value=\"PE\">PE</option>\r\n                <option value=\"SK\">SK</option>\r\n                <option value=\"NL\">NL</option>\r\n                <option value=\"MB\">MB</option>\r\n                <option value=\"NT\">NT</option>\r\n                <option value=\"YT\">YT</option>\r\n                <option value=\"NU\">NU</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"podcastSearch\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder='Search for a Podcast'\r\n                onChange={this.handlePodcastChange}\r\n                value={this.state.userEntry} required>\r\n              </input>\r\n            </div>\r\n            <div>\r\n              <button className=\"mapSubmitButton\">Search</button> \r\n            </div>\r\n          </form>\r\n        </section>\r\n\r\n        {this.state.isLoading ? <Preloader /> : null}\r\n        \r\n        <Map \r\n        grabCommuteTime={this.grabCommuteTime} \r\n        grabMapUrl={this.grabMapUrl}\r\n        from={this.state.from} \r\n        to={this.state.to}\r\n        routeSelected={this.routeSelected}\r\n        />\r\n        <Podcast \r\n        time={this.state.appTime} \r\n        userInput={this.state.userInput}\r\n        podData={this.state.podData}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}